{"version":3,"sources":["../../2 - closure/example2.js"],"names":["fn","foo","a","innerFoo","console","log","bar"],"mappings":";;AAAA,IAAIA,KAAK,IAAT;AACA,IAAMC,MAAM,SAANA,GAAM,GAAM;AACd,QAAIC,IAAI,CAAR;AACA,aAASC,QAAT,GAAoB;AAChBC,gBAAQC,GAAR,CAAYH,CAAZ;AACH;AACDF,SAAKG,QAAL;AACH,CAND;;AAQA,IAAIG,MAAM,SAANA,GAAM,GAAM;AACZN;AACH,CAFD;;AAIAC,M,CAAM;AACNK,M,CAAM","file":"example2.js","sourcesContent":["var fn = null\r\nconst foo = () => {\r\n    var a = 2\r\n    function innerFoo() {\r\n        console.log(a)\r\n    }\r\n    fn = innerFoo\r\n}\r\n\r\nvar bar = () => {\r\n    fn()\r\n}\r\n\r\nfoo() // 正常来说，在 foo 执行完成后，上下文会销毁以及被GC回收，但是因为 innerFoo 赋值给了 fn，所以 innerFoo 中的变量 a 依旧能够被访问，也正因为如此，a 未被回收\r\nbar() // 此时当再调用 bar 的时候， 可以输出 2"]}